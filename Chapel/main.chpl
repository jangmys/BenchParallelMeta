
use SysCTypes;
use solution;
use instance;
use evalQ3AP;
use ga;
use Time;
use QAP_module;
use micro_bench;
use ils;

//To use the configuration file, ./chplheuristic.out -f config/file
//For passing each parameter by hand, /chplheuristic.out --var1=value1 --var2=value2 ... --var=valuen


config const mode = "benchmark"; //modes: micro benchmark, Q3AP-GA, Q3AP-ILS. Problems: tsp, fsp, q3ap and qap.

config const problem : string = "tsp"; //This problem parameter is just for the Micro benchmark.
config const fileinst: string = "experiments/tsp/berlin52.tsp"; //File instance. It is used for all problems but FSP.
config const fsp_instance: c_short = 10; //FSP-only parameter. The instances are generated by Taillard's generator.
config const microb_pop: int = 10; //pop size for the microbench
config const repetitions: int = 10;  //repetitin for the micro benchmark
config const verbose: bool = false;//Micro benchmark additional information

//Parameters for the heuristics


//ga-specific parameters
config const ls_rate: real = 0.7;
config const mutate_rate: real = 0.3;
config const ga_numgen = max(int);


proc check_problem(const problem: string){
	if problem != "q3ap" then halt("### GA and ILS are only implemented for the Q3AP ###");
}

proc main(){

	writeln(mode);

	select mode{//What should we do? 

		when "ga"{ //Q3AP GA

			//READING THE INSTANCE
			writeln("Tasks:", here.maxTaskPar,"\n");
			writeln("Instance: ", fileinst,"\n");
			var timer: Timer;
			var instance = new Instance(file=fileinst);

			instance.get_flow_dist(); 
			var eval = new evalQ3AP(size=instance.size);
			eval.init_costMatrix(instance);
			var ils = new ILS(size=eval.size);
			ils.init_nhood();

			//it uses some ils internally
			var ga = new GA(instance.size);
			var bestsol = new Solution(ils.size); 

			ga.ls_rate = ls_rate;
		   	ga.mutate_rate = mutate_rate;
		   	ga.nb_generations=ga_numgen;
		   	
			timer.start();
			ga.randomInitPop(eval);
			for i in 0..(ga.nb_generations-1) do {
				ga.evolve(eval,ils);
				bestsol = ga.getBest(eval);
				ga.bestcost = ga.getBest(eval).cost;
				writeln(bestsol);
				writeln("======= GENERATION ", i, " Avg: ", ga.avgcost," Best: ", ga.bestcost);
			}
			timer.stop();
			writeln("Elapsed(s): ", timer.elapsed() );
			timer.clear();
			
		}
		when "ils"{//Q3AP ILS

			writeln("Tasks:", here.maxTaskPar,"\n");
			writeln("Instance: ", fileinst,"\n");

			var timer: Timer;
			
			var instance = new Instance(file=fileinst);
			instance.get_flow_dist(); //I need this because i cannot use referencees inside a record/class.
			
			var eval = new evalQ3AP(size=instance.size);
			eval.init_costMatrix(instance);
			var ils = new ILS(size=eval.size);

			ils.init_nhood();//I need this because i cannot use reerences inside a record/class.
			var bestsol = new Solution(ils.size);

			timer.start();
			var nhood_evals: int = ils.runPAR(bestsol,eval); //run
			timer.stop();
			
			writeln("\n#################################\nBest Solution found: ", bestsol.cost);
			writeln("\n", bestsol);
			writeln("\n");
			writeln("ILS WITH 6D MATRIX.");
			writeln("Nhood-eval: ", nhood_evals  );
			writeln("Elapsed(s): ", timer.elapsed() );
			writef("nhood/sec: %.3dr\n",  (nhood_evals:real)/timer.elapsed());
			timer.clear();
		}
		when "benchmark"{//Microbenchmark of Section 5.3
			micro_bench_problem_choice(problem, fileinst, fsp_instance, microb_pop, repetitions,verbose);
		}
		otherwise{
			halt("Wrong parameters. Please, refer to the README file. ");
		}
	}

	

}//////////////////

